using System;
using System.IO;
using System.Windows.Forms; // For Application.ExecutablePath
using SagraFacile.WindowsPrinterService.Models; // For ProfileSettings

// Required for creating shortcuts.
// Ensure the project has a COM reference to "Windows Script Host Object Model".
// In the .csproj file, add:
// <ItemGroup>
//   <COMReference Include="IWshRuntimeLibrary">
//     <WrapperTool>tlbimp</WrapperTool>
//     <VersionMinor>0</VersionMinor>
//     <VersionMajor>1</VersionMajor>
//     <Guid>f935dc20-1cf0-11d0-adb9-00c04fd58a0b</Guid>
//     <Lcid>0</Lcid>
//     <Isolated>false</Isolated>
//     <EmbedInteropTypes>true</EmbedInteropTypes>
//   </COMReference>
// </ItemGroup>
// using IWshRuntimeLibrary; // No longer needed

// Using directives for CsWin32 generated types
using Windows.Win32;
using Windows.Win32.Foundation;
using Windows.Win32.System.Com;
using Windows.Win32.UI.Shell;
using System.Runtime.InteropServices; // For Marshal

namespace SagraFacile.WindowsPrinterService.Utils
{
    public static class StartupManager
    {
        public static unsafe void SetAutoStart(ProfileSettings profile, bool enable) // Added unsafe
        {
            if (profile == null || string.IsNullOrEmpty(profile.ProfileName) || string.IsNullOrEmpty(profile.InstanceGuid))
            {
                Console.WriteLine("Error: Profile, ProfileName, or InstanceGuid is null/empty. Cannot manage autostart.");
                // Optionally, throw an ArgumentNullException or handle more gracefully
                return;
            }

            try
            {
                string startupFolderPath = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
                // Sanitize profile name for use in a file name, though it should be fairly safe from ProfileSelectionForm
                string sanitizedProfileName = string.Join("_", profile.ProfileName.Split(Path.GetInvalidFileNameChars()));
                string shortcutName = $"SagraFacile Printer - {sanitizedProfileName}.lnk";
                string shortcutPath = Path.Combine(startupFolderPath, shortcutName);

                if (enable)
                {
                    string executablePath = Application.ExecutablePath;
                    if (string.IsNullOrEmpty(executablePath))
                    {
                        Console.WriteLine("Error: Application.ExecutablePath is null or empty. Cannot create autostart shortcut.");
                        return;
                    }

                    string arguments = $"--profile-guid \"{profile.InstanceGuid}\"";

                    // Initialize COM for this thread
                    PInvoke.CoInitializeEx(null, COINIT.COINIT_APARTMENTTHREADED).ThrowOnFailure();

                    IShellLinkW? shellLink = null;
                    IPersistFile? persistFile = null;

                    try
                    {
                        // Create an instance of IShellLink
                        // The CLSID for ShellLink object is {00021401-0000-0000-C000-000000000046}
                        // The IID for IShellLinkW is {000214F9-0000-0000-C000-000000000046}
                        // These should be generated by CsWin32 if specified in NativeMethods.txt
                        // or we can define them. CsWin32 aims to make this direct.

                        // Use the generated ShellLink CoClass directly if available, or CoCreateInstance
                        // For CsWin32, it's often easier to use the generated CoClass constructor if available
                        // However, direct CoCreateInstance is more explicit for interop.
                        
                        // Use the generated CLSID and IID constants from CsWin32
                        // These are typically found under Windows.Win32.UI.Shell.PInvoke.CLSID_ShellLink
                        // and Windows.Win32.UI.Shell.PInvoke.IID_IShellLinkW
                        // However, if not directly generated as constants, we use the explicit GUIDs.
                        // CsWin32 should make the ShellLink class available directly if specified in NativeMethods.txt
                        // new Windows.Win32.UI.Shell.ShellLink() should work.
                        // If we stick to CoCreateInstance for learning/explicitness:
                        Guid clsidShellLink = new Guid("00021401-0000-0000-C000-000000000046"); // CLSID_ShellLink
                        // Guid iidIShellLinkW = new Guid("000214F9-0000-0000-C000-000000000046"); // IID_IShellLinkW
                        // For CoCreateInstance, the IID is often implicitly derived from the type of the out parameter.

                        object? shellLinkObject = null;
                        PInvoke.CoCreateInstance(
                            in clsidShellLink,
                            null, // pUnkOuter
                            CLSCTX.CLSCTX_INPROC_SERVER,
                            typeof(IShellLinkW).GUID, // Pass the IID explicitly
                            out shellLinkObject 
                        ).ThrowOnFailure();

                        shellLink = shellLinkObject as IShellLinkW;
                        
                        if (shellLink == null)
                        {
                            Console.WriteLine("Error: Failed to create IShellLinkW instance or cast it from CoCreateInstance.");
                            // Attempt to release if shellLinkObject is a raw COM pointer, though it should be an RCW here.
                            if (shellLinkObject != null && Marshal.IsComObject(shellLinkObject))
                            {
                                Marshal.ReleaseComObject(shellLinkObject);
                            }
                            return;
                        }

                        // Set the properties of the shortcut
                        shellLink.SetPath(executablePath);
                        shellLink.SetArguments(arguments);
                        if (!string.IsNullOrEmpty(Path.GetDirectoryName(executablePath)))
                        {
                            shellLink.SetWorkingDirectory(Path.GetDirectoryName(executablePath));
                        }
                        shellLink.SetDescription($"Avvia SagraFacile Printer Profile: {profile.ProfileName}");
                        // Optionally set an icon: shellLink.SetIconLocation(executablePath, 0);

                        // Query for IPersistFile to save the shortcut
                        persistFile = (IPersistFile)shellLink; // This cast should work if shellLink is valid COM object
                        persistFile.Save(shortcutPath, fRemember: true);

                        Console.WriteLine($"Autostart shortcut created for profile '{profile.ProfileName}' at '{shortcutPath}'.");
                    }
                    catch (Exception exInner)
                    {
                        Console.WriteLine($"Inner exception creating shortcut: {exInner.Message}");
                        MessageBox.Show($"Errore interno durante la creazione del collegamento per '{profile.ProfileName}':\n{exInner.Message}",
                                        "Errore Creazione Collegamento", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    finally
                    {
                        // Release COM objects
                        if (persistFile != null) Marshal.ReleaseComObject(persistFile);
                        if (shellLink != null) Marshal.ReleaseComObject(shellLink);
                        
                        // Uninitialize COM
                        PInvoke.CoUninitialize();
                    }
                }
                else
                {
                    if (File.Exists(shortcutPath))
                    {
                        File.Delete(shortcutPath);
                        Console.WriteLine($"Autostart shortcut removed for profile '{profile.ProfileName}' from '{shortcutPath}'.");
                    }
                    else
                    {
                        Console.WriteLine($"Autostart shortcut for profile '{profile.ProfileName}' not found at '{shortcutPath}'. No action taken.");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error managing autostart for profile '{profile.ProfileName}': {ex.Message}");
                // Consider logging this to a file or showing a non-blocking error to the user if appropriate.
                MessageBox.Show($"Errore durante la gestione dell'avvio automatico per '{profile.ProfileName}':\n{ex.Message}", 
                                "Errore Avvio Automatico", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
